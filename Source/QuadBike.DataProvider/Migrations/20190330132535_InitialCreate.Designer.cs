// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuadBike.DataProvider.EF;

namespace QuadBike.DataProvider.Migrations
{
    [DbContext(typeof(QuadBikeContext))]
    [Migration("20190330132535_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("QuadBike.DataProvider.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActivate");

                    b.Property<bool>("IsVerified");

                    b.Property<string>("Password")
                        .HasMaxLength(50);

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("QuadBike.DataProvider.Entities.Bike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<int>("Fuel");

                    b.Property<int>("MaxSpeed");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<int>("Power");

                    b.Property<int>("Price");

                    b.Property<int>("ProvideId");

                    b.Property<int?>("ProviderId");

                    b.Property<int?>("RentTripId");

                    b.Property<string>("TypeEngine")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("RentTripId");

                    b.ToTable("Bike");
                });

            modelBuilder.Entity("QuadBike.DataProvider.Entities.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<string>("Adress")
                        .HasMaxLength(50);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<byte[]>("Logo");

                    b.Property<string>("Mobile")
                        .HasMaxLength(13);

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Provider");
                });

            modelBuilder.Entity("QuadBike.DataProvider.Entities.RentBike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BikeId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BikeId");

                    b.HasIndex("UserId");

                    b.ToTable("RentBike");
                });

            modelBuilder.Entity("QuadBike.DataProvider.Entities.RentTrip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TripId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TripId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RentTrip");
                });

            modelBuilder.Entity("QuadBike.DataProvider.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameOfRole")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("QuadBike.DataProvider.Entities.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountOfPeople");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<int>("Distance");

                    b.Property<DateTime>("EndTrip");

                    b.Property<bool>("IsActivate");

                    b.Property<int>("Price");

                    b.Property<int>("ProvideId");

                    b.Property<int?>("ProviderId");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("TripName")
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Trip");
                });

            modelBuilder.Entity("QuadBike.DataProvider.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<DateTime>("Birthday");

                    b.Property<string>("Mobile")
                        .HasMaxLength(13);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Photo");

                    b.Property<string>("Surname")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("QuadBike.DataProvider.Entities.Account", b =>
                {
                    b.HasOne("QuadBike.DataProvider.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QuadBike.DataProvider.Entities.Bike", b =>
                {
                    b.HasOne("QuadBike.DataProvider.Entities.Provider", "Provider")
                        .WithMany("Bikes")
                        .HasForeignKey("ProviderId");

                    b.HasOne("QuadBike.DataProvider.Entities.RentTrip", "RentTrip")
                        .WithMany()
                        .HasForeignKey("RentTripId");
                });

            modelBuilder.Entity("QuadBike.DataProvider.Entities.Provider", b =>
                {
                    b.HasOne("QuadBike.DataProvider.Entities.Account", "Account")
                        .WithOne("Provider")
                        .HasForeignKey("QuadBike.DataProvider.Entities.Provider", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QuadBike.DataProvider.Entities.RentBike", b =>
                {
                    b.HasOne("QuadBike.DataProvider.Entities.Bike", "Bike")
                        .WithMany()
                        .HasForeignKey("BikeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QuadBike.DataProvider.Entities.User", "User")
                        .WithMany("RentBikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QuadBike.DataProvider.Entities.RentTrip", b =>
                {
                    b.HasOne("QuadBike.DataProvider.Entities.Trip", "Trip")
                        .WithOne("RentTrip")
                        .HasForeignKey("QuadBike.DataProvider.Entities.RentTrip", "TripId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QuadBike.DataProvider.Entities.User", "User")
                        .WithMany("RentTrips")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QuadBike.DataProvider.Entities.Trip", b =>
                {
                    b.HasOne("QuadBike.DataProvider.Entities.Provider", "Provider")
                        .WithMany("Trips")
                        .HasForeignKey("ProviderId");
                });

            modelBuilder.Entity("QuadBike.DataProvider.Entities.User", b =>
                {
                    b.HasOne("QuadBike.DataProvider.Entities.Account", "Account")
                        .WithOne("User")
                        .HasForeignKey("QuadBike.DataProvider.Entities.User", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
