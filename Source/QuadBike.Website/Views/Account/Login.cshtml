@model QuadBike.Model.ViewModel.AccountViewModels.LoginViewModel
@{
    ViewData["Title"] = "Sign In";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@if (ViewData["Message"] != null)
{
    <div id="popupdiv" class="alert alert-danger" style="display: none;">
        @ViewData["Message"]
        <button type="button" class="close" data-dismiss="alert">&times;</button>
    </div>
}
<form style="background-color: #f7f9fc; vertical-align:central;" class="text-center border border-light p-5 mb-4 col-md-6 offset-md-3 needs-validation" method="post" asp-controller="Account" asp-action="Login" asp-route-returnUrl="@Model.ReturnUrl" novalidate>
    <div asp-validation-summary="ModelOnly"></div>
    <p class="h4 mb-4">Sign in</p>
    <div>
        <input type="email" asp-for="Email" id="defaultLoginFormEmail" class="form-control mb-2 col-md-8 offset-md-2" placeholder="E-mail" required pattern="^(?=.*[.]).{1,}$">
        <span asp-validation-for="Email" class="invalid-feedback">
            Please, write correct Email!
        </span>
    </div>

    <div>
        <input type="password" asp-for="Password" id="defaultLoginFormPassword" class="form-control mb-2 col-md-8 offset-md-2" placeholder="Password" required>
        <span asp-validation-for="Password" class="invalid-feedback">
            Password cannot be empty!
        </span>
    </div>

    <div class="d-flex justify-content-around">
        <div>
            <div class="custom-control custom-checkbox">
                <input type="checkbox" asp-for="RememberMe" class="custom-control-input" id="defaultLoginFormRemember" novalidate>
                <label class="custom-control-label" for="defaultLoginFormRemember">Remember me</label>
            </div>
        </div>
    </div>

    <button class="btn btn-info btn-block my-4 col-md-6 offset-md-3" type="submit">Sign in</button>
    <p>
        Not a member?
        <a class="link text-primary" asp-controller="Account" asp-action="Register">Register</a>
    </p>
</form>

<script type="text/javascript">
    (function () {
        'use strict';
        window.addEventListener('load', function () {
            var forms = document.getElementsByClassName('needs-validation');
            var validation = Array.prototype.filter.call(forms, function (form) {
                form.addEventListener('submit', function (event) {
                    if (form.checkValidity() === false) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        }, false);
    })();
</script>
<script type="text/javascript">
    $(document).ready(function () {
        if ($('#popupdiv').html() != '') {
            $("#popupdiv").show();
        }
    });
</script>